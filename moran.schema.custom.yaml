# 要在 moran.schema.yaml 手動添加
# __patch: moran.schema.custom:/patch?
# 才能令該補靪生効

patch:
  # 添加用于在用字標準間切换的三態开关
  switches: 
    - name: ascii_mode
      states: [ 中文, 西文 ]
    - options: [ std_opencc, std_priv, std_simp ]
      states: [ 正, 歪, 简 ]
      reset: 1
    - name: extended_charset
      states: [ 通用, 增廣 ]
    # 隠藏部分开关的状態
    - name: full_shape
    - name: ascii_punct
    - name: chaifen
    - name: emoji
      reset: 1
    - name: unicode_comment

  # 移除默訒的簡化逻輯，用两个互斥的簡化器来控制
  engine/filters:
    - lua_filter@*moran_charset_filter
    - simplifier@chaifen
    - simplifier@emoji
    - simplifier@std_simp
    - simplifier@std_priv
    - uniquifier

  # 自定簡化器
  std_priv:
    opencc_config: t2p.json
    option_name: std_priv

  # 標準簡化器
  std_simp:
    opencc_config: moran_t2s.json
    option_name: std_simp

  # 关閉部分反查功能
  recognizer:
    import_preset: default
    patterns:
      reverse_stroke: "^obh[A-Za-z]*$"
      reverse_zrlf: "^olf[A-Za-z]*$"
      punct: '^/([0-9]0?|[A-Za-z]+)$'

  # 优化拆字提示的格式
  chaifen/comment_format:
    # 过滤为空的拆分
    - xform/〔\\..+〕// 
    # 用 | 来分割多组拆分，而非用多组括号
    - xform/〕〔/｜/
    # 关闭编码提示
    # - xform/[a-z]+//    

  # 自定義快捷鍵
  key_binder/bindings:
    # 音節間快速跳轉
    - { when: has_menu, accept: "Tab", send: "Control+Right" }
    - { when: composing, accept: "Tab", send: "Control+Right" }
    # 功能开关
    - { when: has_menu, accept: "Control+i", toggle: chaifen }
    - { when: has_menu, accept: "Control+e", toggle: emoji }
    - { when: composing, accept: "Control+x", toggle: extended_charset }
    # 字形快速切換
    - {accept: Control+Shift+T, set_option: std_opencc, when: always}
    - {accept: Control+Shift+P, set_option: std_priv, when: always}
    - {accept: Control+Shift+S, set_option: std_simp, when: always}
    # 字形快速切换（候選窗）
    - {accept: Control+t, set_option: std_opencc, when: has_menu}
    - {accept: Control+p, set_option: std_priv, when: has_menu}
    - {accept: Control+s, set_option: std_simp, when: has_menu}
    # 字形遍歷
    - {accept: Control+Shift+O, toggle: std_opencc, when: always}
    